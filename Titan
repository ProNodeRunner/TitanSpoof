#!/bin/bash

# Конфигурация
CONFIG_FILE="/etc/multinode.conf"
BASE_IP="192.168.1.100"
NETWORK_INTERFACE="eth0"
TIMEZONE="Europe/Moscow"
LOGO_URL="https://raw.githubusercontent.com/ProNodeRunner/Logo/main/Logo"
ORANGE='\033[0;33m'
GREEN='\033[0;32m'
RED='\033[0;31m'
NC='\033[0m'

show_menu() {
    clear
    echo -e "${ORANGE}"
    curl -sSf $LOGO_URL 2>/dev/null || echo "=== Titan Node Manager ==="
    echo -e "\n1) Установить все компоненты"
    echo "2) Задать количество нод"
    echo "3) Проверить работу нод"
    echo "4) Удалить все ноды"
    echo "5) Выход"
    echo -e "${NC}"
}

generate_hw_profile() {
    local cpu=$((4 * (1 + RANDOM % 8)))    # 4-32 ядра (кратно 4)
    local ram=$((8 * (1 + RANDOM % 16)))   # 8-128 GB RAM
    local ssd=$((256 * (1 + RANDOM % 8)))  # 256-2048 GB SSD
    echo "$cpu,$ram,$ssd"
}

install_dependencies() {
    echo -e "${ORANGE}[*] Инициализация системы...${NC}"
    export DEBIAN_FRONTEND=noninteractive
    
    # Подавление системных диалогов
    sudo mkdir -p /etc/needrestart/conf.d
    echo -e "\$nrconf{restart} = 'a';\n\$nrconf{kernelhints} = 0;" | sudo tee /etc/needrestart/conf.d/99-disable.conf >/dev/null
    sudo apt-get purge -y unattended-upgrades

    # Установка пакетов
    sudo apt-get update -y
    sudo apt-get install -yq \
        curl docker.io jq screen \
        cgroup-tools iptables

    # Настройка Docker
    sudo systemctl enable --now docker
    sudo usermod -aG docker $USER

    # Systemd сервис
    sudo tee /etc/systemd/system/titan-node.service >/dev/null <<EOF
[Unit]
Description=Titan Node Service
After=docker.service

[Service]
ExecStart=/usr/bin/screen -dmS titan_nodes /bin/bash $0 --auto-start
Restart=always

[Install]
WantedBy=multi-user.target
EOF
    sudo systemctl daemon-reload
    sudo systemctl enable titan-node.service
    echo -e "${GREEN}[✓] Система готова!${NC}"
}

create_fake_proc() {
    local cpu=$1 ram=$2
    mkdir -p /fake_proc
    
    models=("Intel(R) Xeon(R) Platinum 8375C" "AMD EPYC 7B12" "ARM Neoverse-N1")
    model=${models[$RANDOM % ${#models[@]}]}
    
    for i in $(seq 0 $(($cpu-1))); do
        echo "processor : $i" >> /fake_proc/cpuinfo
        echo "model name : $model" >> /fake_proc/cpuinfo
        echo "cpu MHz : $((2400 + RANDOM % 1000)).000" >> /fake_proc/cpuinfo
    done
    
    mem_total_kb=$(($ram * 1024 * 1024))
    sed "s/MemTotal.*/MemTotal: ${mem_total_kb} kB/" /proc/meminfo > /fake_proc/meminfo
}

spoof_hardware() {
    mount --bind /fake_proc/meminfo /proc/meminfo
    echo $(( $1 * 1024 * 1024 * 1024 )) > /sys/fs/cgroup/memory/memory.limit_in_bytes
}

create_node() {
    local node_num=$1 identity_code=$2
    IFS=',' read -r cpu ram ssd <<< "$(generate_hw_profile)"
    local volume="titan_data_$node_num"
    local node_ip=$(echo "$BASE_IP" | awk -F. -v i="$node_num" '{OFS="."; $4+=i; print}')

    docker volume create $volume >/dev/null
    echo "$identity_code" | docker run -i --rm -v $volume:/data alpine sh -c "cat > /data/identity.key"

    screen -dmS "node_$node_num" docker run -d \
        --name "titan_node_$node_num" \
        --network host \
        --restart always \
        -v $volume:/root/.titanedge \
        -v /fake_proc:/fake_proc \
        nezha123/titan-edge \
        /bin/sh -c "create_fake_proc $cpu $ram; spoof_hardware $ram; ./worker --key \$(cat /root/.titanedge/identity.key)"

    sudo ip addr add $node_ip/24 dev $NETWORK_INTERFACE
    echo -e "${GREEN}[✓] Нода $node_num: ${cpu} ядер, ${ram}GB RAM, ${ssd}GB SSD${NC}"
}

setup_nodes() {
    read -p "Введите количество нод: " node_count
    for ((i=1; i<=$node_count; i++)); do
        read -p "Введите ключ для ноды $i: " key
        create_node $i "$key"
    done
}

check_nodes() {
    docker ps -a --filter "name=titan_node" --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
}

cleanup() {
    docker stop $(docker ps -aq --filter "name=titan_node") 2>/dev/null
    docker rm $(docker ps -aq --filter "name=titan_node") 2>/dev/null
    docker volume prune -f
    sudo systemctl disable titan-node.service
}

case $1 in
    --auto-start)
        if [ -f $CONFIG_FILE ]; then
            source $CONFIG_FILE
            setup_nodes
        fi
        ;;
    *)
        while true; do
            show_menu
            read -p "Выбор: " choice
            case $choice in
                1) install_dependencies ;;
                2) setup_nodes ;;
                3) check_nodes ;;
                4) cleanup ;;
                5) exit ;;
                *) echo -e "${RED}Неверный выбор!${NC}"; sleep 1 ;;
            esac
        done
        ;;
esac

if [ $(docker ps -q --filter "name=titan_node" | wc -l) -gt 0 ]; then
    echo -e "${GREEN}\nНОДЫ УСПЕШНО УСТАНОВЛЕНЫ!${NC}"
else
    echo -e "${RED}\nОШИБКА УСТАНОВКИ!${NC}"
fi
